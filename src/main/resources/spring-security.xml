<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns:context="http://www.springframework.org/schema/context"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
                           http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


    <!-- 验证oauth client -->
    <sec:authentication-manager id="clientAuthenticationManager">
        <sec:authentication-provider user-service-ref="clientDetailsUserDetailsService">
            <sec:password-encoder ref="passwordEncoder"/>
        </sec:authentication-provider>
    </sec:authentication-manager>

    <bean id="clientDetailsUserDetailsService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetailsService"/>
    </bean>

    <oauth:client-details-service id="clientDetailsService">
        <oauth:client client-id="oauthtest"
                      secret="1111"
                      authorized-grant-types="password,refresh_token"
                      scope="all,read,write"
                      authorities="ROLE_CLIENT,ROLE_TRUSTED_CLIENT"/>
    </oauth:client-details-service>

    <!--<bean id="clientDetailsService" class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService"-->

    <!--
     验证user
     注册两个authentication-manager， 定义两个id, 使用alias会被clientAuthenticationManager覆盖
     -->
    <sec:authentication-manager id="authenticationManager">
        <sec:authentication-provider>
            <sec:user-service>
                <sec:user name="kathy" password="kathy1234" authorities="ROLE_CLIENT"/>
            </sec:user-service>
            <sec:password-encoder ref="passwordEncoder"/>
        </sec:authentication-provider>
    </sec:authentication-manager>

    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore"/>
        <property name="accessTokenValiditySeconds" value="600"/>
        <property name="clientDetailsService" ref="clientDetailsService"/>
    </bean>

    <bean id="tokenStore"
          class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"/>

    <bean id="oauthUserApprovalHandler"
                class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler" />

    <oauth:authorization-server
        client-details-service-ref="clientDetailsService"
        token-services-ref="tokenServices"
        user-approval-handler-ref="oauthUserApprovalHandler">
        <oauth:authorization-code/>
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials/>
        <oauth:password/>
    </oauth:authorization-server>

    <sec:http pattern="/oauth/**"
              create-session="stateless"
              use-expressions="true"
              authentication-manager-ref="clientAuthenticationManager">
        <sec:intercept-url pattern="/oauth/token" access="isFullyAuthenticated()"/>
        <sec:anonymous enabled="false"/>
        <sec:csrf disabled="true"/>
        <sec:http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauthAccessDeniedHandler"/>
    </sec:http>

    <bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="typeName" value="Basic"/>
    </bean>

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
    </bean>

    <bean id="oauthAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

    <!--<bean id="passwordEncoder"-->
          <!--class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>-->

    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>

    <sec:http pattern="/test/**"
              create-session="never"
              use-expressions="true"
              entry-point-ref="oauthAuthenticationEntryPoint"
              access-decision-manager-ref="accessDecisionManager">
        <sec:csrf disabled="true"/>
        <sec:anonymous enabled="true"/>
        <sec:intercept-url pattern="/test/**" access="isFullyAuthenticated() and hasRole('ROLE_CLIENT')"/>
        <sec:custom-filter ref="testResourceFilter" before="PRE_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauthAccessDeniedHandler"/>
    </sec:http>

    <oauth:resource-server
        id="testResourceFilter"
        resource-id="test-resource"
        token-services-ref="tokenServices"/>

    <bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg>
            <list>
                <!-- If expressions are being used, a WebExpressionVoter will be added to the AccessDecisionManager -->
                <bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <bean class="org.springframework.security.access.vote.RoleVoter"/>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>

</beans>